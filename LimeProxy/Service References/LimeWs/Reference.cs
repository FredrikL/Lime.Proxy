//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LimeProxy.LimeWs {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
    [System.SerializableAttribute()]
    public partial class DataException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
    [System.SerializableAttribute()]
    public partial class ServiceException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://lundalogik.se/Tangelo/", ConfigurationName="LimeWs.IDataService")]
    public interface IDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/ExecuteProcedure", ReplyAction="http://lundalogik.se/Tangelo/IDataService/ExecuteProcedureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IDataService/ExecuteProcedureDataExceptionFault", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IDataService/ExecuteProcedureServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        LimeProxy.LimeWs.ExecuteProcedureResponse ExecuteProcedure(LimeProxy.LimeWs.ExecuteProcedureRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/ExecuteProcedure", ReplyAction="http://lundalogik.se/Tangelo/IDataService/ExecuteProcedureResponse")]
        System.Threading.Tasks.Task<LimeProxy.LimeWs.ExecuteProcedureResponse> ExecuteProcedureAsync(LimeProxy.LimeWs.ExecuteProcedureRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/ExecuteProcedureForSession", ReplyAction="http://lundalogik.se/Tangelo/IDataService/ExecuteProcedureForSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IDataService/ExecuteProcedureForSessionServiceExcept" +
            "ionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IDataService/ExecuteProcedureForSessionDataException" +
            "Fault", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        LimeProxy.LimeWs.ExecuteProcedureForSessionResponse ExecuteProcedureForSession(LimeProxy.LimeWs.ExecuteProcedureForSessionRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/ExecuteProcedureForSession", ReplyAction="http://lundalogik.se/Tangelo/IDataService/ExecuteProcedureForSessionResponse")]
        System.Threading.Tasks.Task<LimeProxy.LimeWs.ExecuteProcedureForSessionResponse> ExecuteProcedureForSessionAsync(LimeProxy.LimeWs.ExecuteProcedureForSessionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/GetFiles", ReplyAction="http://lundalogik.se/Tangelo/IDataService/GetFilesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IDataService/GetFilesDataExceptionFault", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IDataService/GetFilesServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(LimeProxy.LimeWs.DataException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(LimeProxy.LimeWs.ServiceException))]
        string GetFiles(string table, string field, object query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/GetFiles", ReplyAction="http://lundalogik.se/Tangelo/IDataService/GetFilesResponse")]
        System.Threading.Tasks.Task<string> GetFilesAsync(string table, string field, object query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/GetFilesForSession", ReplyAction="http://lundalogik.se/Tangelo/IDataService/GetFilesForSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IDataService/GetFilesForSessionDataExceptionFault", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IDataService/GetFilesForSessionServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(LimeProxy.LimeWs.DataException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(LimeProxy.LimeWs.ServiceException))]
        string GetFilesForSession(string sessionId, string table, string field, object query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/GetFilesForSession", ReplyAction="http://lundalogik.se/Tangelo/IDataService/GetFilesForSessionResponse")]
        System.Threading.Tasks.Task<string> GetFilesForSessionAsync(string sessionId, string table, string field, object query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/GetXmlQueryData", ReplyAction="http://lundalogik.se/Tangelo/IDataService/GetXmlQueryDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IDataService/GetXmlQueryDataDataExceptionFault", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IDataService/GetXmlQueryDataServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        string GetXmlQueryData(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/GetXmlQueryData", ReplyAction="http://lundalogik.se/Tangelo/IDataService/GetXmlQueryDataResponse")]
        System.Threading.Tasks.Task<string> GetXmlQueryDataAsync(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/GetXmlQueryDataForSession", ReplyAction="http://lundalogik.se/Tangelo/IDataService/GetXmlQueryDataForSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IDataService/GetXmlQueryDataForSessionServiceExcepti" +
            "onFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IDataService/GetXmlQueryDataForSessionDataExceptionF" +
            "ault", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        string GetXmlQueryDataForSession(string sessionId, string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/GetXmlQueryDataForSession", ReplyAction="http://lundalogik.se/Tangelo/IDataService/GetXmlQueryDataForSessionResponse")]
        System.Threading.Tasks.Task<string> GetXmlQueryDataForSessionAsync(string sessionId, string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/UpdateData", ReplyAction="http://lundalogik.se/Tangelo/IDataService/UpdateDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IDataService/UpdateDataDataExceptionFault", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IDataService/UpdateDataServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        string UpdateData(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/UpdateData", ReplyAction="http://lundalogik.se/Tangelo/IDataService/UpdateDataResponse")]
        System.Threading.Tasks.Task<string> UpdateDataAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/UpdateDataForSession", ReplyAction="http://lundalogik.se/Tangelo/IDataService/UpdateDataForSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IDataService/UpdateDataForSessionDataExceptionFault", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IDataService/UpdateDataForSessionServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        string UpdateDataForSession(string sessionId, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IDataService/UpdateDataForSession", ReplyAction="http://lundalogik.se/Tangelo/IDataService/UpdateDataForSessionResponse")]
        System.Threading.Tasks.Task<string> UpdateDataForSessionAsync(string sessionId, string data);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecuteProcedure", WrapperNamespace="http://lundalogik.se/Tangelo/", IsWrapped=true)]
    public partial class ExecuteProcedureRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://lundalogik.se/Tangelo/", Order=0)]
        public string procedureXml;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://lundalogik.se/Tangelo/", Order=1)]
        public bool async;
        
        public ExecuteProcedureRequest() {
        }
        
        public ExecuteProcedureRequest(string procedureXml, bool async) {
            this.procedureXml = procedureXml;
            this.async = async;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecuteProcedureResponse", WrapperNamespace="http://lundalogik.se/Tangelo/", IsWrapped=true)]
    public partial class ExecuteProcedureResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://lundalogik.se/Tangelo/", Order=0)]
        public string ExecuteProcedureResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://lundalogik.se/Tangelo/", Order=1)]
        public string procedureXml;
        
        public ExecuteProcedureResponse() {
        }
        
        public ExecuteProcedureResponse(string ExecuteProcedureResult, string procedureXml) {
            this.ExecuteProcedureResult = ExecuteProcedureResult;
            this.procedureXml = procedureXml;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecuteProcedureForSession", WrapperNamespace="http://lundalogik.se/Tangelo/", IsWrapped=true)]
    public partial class ExecuteProcedureForSessionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://lundalogik.se/Tangelo/", Order=0)]
        public string sessionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://lundalogik.se/Tangelo/", Order=1)]
        public string procedureXml;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://lundalogik.se/Tangelo/", Order=2)]
        public bool async;
        
        public ExecuteProcedureForSessionRequest() {
        }
        
        public ExecuteProcedureForSessionRequest(string sessionId, string procedureXml, bool async) {
            this.sessionId = sessionId;
            this.procedureXml = procedureXml;
            this.async = async;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecuteProcedureForSessionResponse", WrapperNamespace="http://lundalogik.se/Tangelo/", IsWrapped=true)]
    public partial class ExecuteProcedureForSessionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://lundalogik.se/Tangelo/", Order=0)]
        public string ExecuteProcedureForSessionResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://lundalogik.se/Tangelo/", Order=1)]
        public string procedureXml;
        
        public ExecuteProcedureForSessionResponse() {
        }
        
        public ExecuteProcedureForSessionResponse(string ExecuteProcedureForSessionResult, string procedureXml) {
            this.ExecuteProcedureForSessionResult = ExecuteProcedureForSessionResult;
            this.procedureXml = procedureXml;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataServiceChannel : LimeProxy.LimeWs.IDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataServiceClient : System.ServiceModel.ClientBase<LimeProxy.LimeWs.IDataService>, LimeProxy.LimeWs.IDataService {
        
        public DataServiceClient() {
        }
        
        public DataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LimeProxy.LimeWs.ExecuteProcedureResponse LimeProxy.LimeWs.IDataService.ExecuteProcedure(LimeProxy.LimeWs.ExecuteProcedureRequest request) {
            return base.Channel.ExecuteProcedure(request);
        }
        
        public string ExecuteProcedure(ref string procedureXml, bool async) {
            LimeProxy.LimeWs.ExecuteProcedureRequest inValue = new LimeProxy.LimeWs.ExecuteProcedureRequest();
            inValue.procedureXml = procedureXml;
            inValue.async = async;
            LimeProxy.LimeWs.ExecuteProcedureResponse retVal = ((LimeProxy.LimeWs.IDataService)(this)).ExecuteProcedure(inValue);
            procedureXml = retVal.procedureXml;
            return retVal.ExecuteProcedureResult;
        }
        
        public System.Threading.Tasks.Task<LimeProxy.LimeWs.ExecuteProcedureResponse> ExecuteProcedureAsync(LimeProxy.LimeWs.ExecuteProcedureRequest request) {
            return base.Channel.ExecuteProcedureAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LimeProxy.LimeWs.ExecuteProcedureForSessionResponse LimeProxy.LimeWs.IDataService.ExecuteProcedureForSession(LimeProxy.LimeWs.ExecuteProcedureForSessionRequest request) {
            return base.Channel.ExecuteProcedureForSession(request);
        }
        
        public string ExecuteProcedureForSession(string sessionId, ref string procedureXml, bool async) {
            LimeProxy.LimeWs.ExecuteProcedureForSessionRequest inValue = new LimeProxy.LimeWs.ExecuteProcedureForSessionRequest();
            inValue.sessionId = sessionId;
            inValue.procedureXml = procedureXml;
            inValue.async = async;
            LimeProxy.LimeWs.ExecuteProcedureForSessionResponse retVal = ((LimeProxy.LimeWs.IDataService)(this)).ExecuteProcedureForSession(inValue);
            procedureXml = retVal.procedureXml;
            return retVal.ExecuteProcedureForSessionResult;
        }
        
        public System.Threading.Tasks.Task<LimeProxy.LimeWs.ExecuteProcedureForSessionResponse> ExecuteProcedureForSessionAsync(LimeProxy.LimeWs.ExecuteProcedureForSessionRequest request) {
            return base.Channel.ExecuteProcedureForSessionAsync(request);
        }
        
        public string GetFiles(string table, string field, object query) {
            return base.Channel.GetFiles(table, field, query);
        }
        
        public System.Threading.Tasks.Task<string> GetFilesAsync(string table, string field, object query) {
            return base.Channel.GetFilesAsync(table, field, query);
        }
        
        public string GetFilesForSession(string sessionId, string table, string field, object query) {
            return base.Channel.GetFilesForSession(sessionId, table, field, query);
        }
        
        public System.Threading.Tasks.Task<string> GetFilesForSessionAsync(string sessionId, string table, string field, object query) {
            return base.Channel.GetFilesForSessionAsync(sessionId, table, field, query);
        }
        
        public string GetXmlQueryData(string query) {
            return base.Channel.GetXmlQueryData(query);
        }
        
        public System.Threading.Tasks.Task<string> GetXmlQueryDataAsync(string query) {
            return base.Channel.GetXmlQueryDataAsync(query);
        }
        
        public string GetXmlQueryDataForSession(string sessionId, string query) {
            return base.Channel.GetXmlQueryDataForSession(sessionId, query);
        }
        
        public System.Threading.Tasks.Task<string> GetXmlQueryDataForSessionAsync(string sessionId, string query) {
            return base.Channel.GetXmlQueryDataForSessionAsync(sessionId, query);
        }
        
        public string UpdateData(string data) {
            return base.Channel.UpdateData(data);
        }
        
        public System.Threading.Tasks.Task<string> UpdateDataAsync(string data) {
            return base.Channel.UpdateDataAsync(data);
        }
        
        public string UpdateDataForSession(string sessionId, string data) {
            return base.Channel.UpdateDataForSession(sessionId, data);
        }
        
        public System.Threading.Tasks.Task<string> UpdateDataForSessionAsync(string sessionId, string data) {
            return base.Channel.UpdateDataForSessionAsync(sessionId, data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://lundalogik.se/Tangelo/", ConfigurationName="LimeWs.IMetaDataService")]
    public interface IMetaDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDatabaseSchema", ReplyAction="http://lundalogik.se/Tangelo/IMetaDataService/GetDatabaseSchemaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDatabaseSchemaDataExceptionFault" +
            "", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDatabaseSchemaServiceExceptionFa" +
            "ult", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        string GetDatabaseSchema();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDatabaseSchema", ReplyAction="http://lundalogik.se/Tangelo/IMetaDataService/GetDatabaseSchemaResponse")]
        System.Threading.Tasks.Task<string> GetDatabaseSchemaAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDatabaseSchemaForSession", ReplyAction="http://lundalogik.se/Tangelo/IMetaDataService/GetDatabaseSchemaForSessionResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDatabaseSchemaForSessionDataExce" +
            "ptionFault", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDatabaseSchemaForSessionServiceE" +
            "xceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        string GetDatabaseSchemaForSession(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDatabaseSchemaForSession", ReplyAction="http://lundalogik.se/Tangelo/IMetaDataService/GetDatabaseSchemaForSessionResponse" +
            "")]
        System.Threading.Tasks.Task<string> GetDatabaseSchemaForSessionAsync(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDataStructure", ReplyAction="http://lundalogik.se/Tangelo/IMetaDataService/GetDataStructureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDataStructureDataExceptionFault", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDataStructureServiceExceptionFau" +
            "lt", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        string GetDataStructure();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDataStructure", ReplyAction="http://lundalogik.se/Tangelo/IMetaDataService/GetDataStructureResponse")]
        System.Threading.Tasks.Task<string> GetDataStructureAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDataStructureForSession", ReplyAction="http://lundalogik.se/Tangelo/IMetaDataService/GetDataStructureForSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDataStructureForSessionServiceEx" +
            "ceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDataStructureForSessionDataExcep" +
            "tionFault", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        string GetDataStructureForSession(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IMetaDataService/GetDataStructureForSession", ReplyAction="http://lundalogik.se/Tangelo/IMetaDataService/GetDataStructureForSessionResponse")]
        System.Threading.Tasks.Task<string> GetDataStructureForSessionAsync(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IMetaDataService/GetTableSchema", ReplyAction="http://lundalogik.se/Tangelo/IMetaDataService/GetTableSchemaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IMetaDataService/GetTableSchemaServiceExceptionFault" +
            "", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IMetaDataService/GetTableSchemaDataExceptionFault", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        string GetTableSchema(string table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IMetaDataService/GetTableSchema", ReplyAction="http://lundalogik.se/Tangelo/IMetaDataService/GetTableSchemaResponse")]
        System.Threading.Tasks.Task<string> GetTableSchemaAsync(string table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IMetaDataService/GetTableSchemaForSession", ReplyAction="http://lundalogik.se/Tangelo/IMetaDataService/GetTableSchemaForSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/IMetaDataService/GetTableSchemaForSessionServiceExce" +
            "ptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.DataException), Action="http://lundalogik.se/Tangelo/IMetaDataService/GetTableSchemaForSessionDataExcepti" +
            "onFault", Name="DataException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        string GetTableSchemaForSession(string sessionId, string table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/IMetaDataService/GetTableSchemaForSession", ReplyAction="http://lundalogik.se/Tangelo/IMetaDataService/GetTableSchemaForSessionResponse")]
        System.Threading.Tasks.Task<string> GetTableSchemaForSessionAsync(string sessionId, string table);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMetaDataServiceChannel : LimeProxy.LimeWs.IMetaDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MetaDataServiceClient : System.ServiceModel.ClientBase<LimeProxy.LimeWs.IMetaDataService>, LimeProxy.LimeWs.IMetaDataService {
        
        public MetaDataServiceClient() {
        }
        
        public MetaDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MetaDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MetaDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MetaDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetDatabaseSchema() {
            return base.Channel.GetDatabaseSchema();
        }
        
        public System.Threading.Tasks.Task<string> GetDatabaseSchemaAsync() {
            return base.Channel.GetDatabaseSchemaAsync();
        }
        
        public string GetDatabaseSchemaForSession(string sessionId) {
            return base.Channel.GetDatabaseSchemaForSession(sessionId);
        }
        
        public System.Threading.Tasks.Task<string> GetDatabaseSchemaForSessionAsync(string sessionId) {
            return base.Channel.GetDatabaseSchemaForSessionAsync(sessionId);
        }
        
        public string GetDataStructure() {
            return base.Channel.GetDataStructure();
        }
        
        public System.Threading.Tasks.Task<string> GetDataStructureAsync() {
            return base.Channel.GetDataStructureAsync();
        }
        
        public string GetDataStructureForSession(string sessionId) {
            return base.Channel.GetDataStructureForSession(sessionId);
        }
        
        public System.Threading.Tasks.Task<string> GetDataStructureForSessionAsync(string sessionId) {
            return base.Channel.GetDataStructureForSessionAsync(sessionId);
        }
        
        public string GetTableSchema(string table) {
            return base.Channel.GetTableSchema(table);
        }
        
        public System.Threading.Tasks.Task<string> GetTableSchemaAsync(string table) {
            return base.Channel.GetTableSchemaAsync(table);
        }
        
        public string GetTableSchemaForSession(string sessionId, string table) {
            return base.Channel.GetTableSchemaForSession(sessionId, table);
        }
        
        public System.Threading.Tasks.Task<string> GetTableSchemaForSessionAsync(string sessionId, string table) {
            return base.Channel.GetTableSchemaForSessionAsync(sessionId, table);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://lundalogik.se/Tangelo/", ConfigurationName="LimeWs.ISessionService")]
    public interface ISessionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/ISessionService/CreateSession", ReplyAction="http://lundalogik.se/Tangelo/ISessionService/CreateSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/ISessionService/CreateSessionServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        string CreateSession(string username, string password, string language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/ISessionService/CreateSession", ReplyAction="http://lundalogik.se/Tangelo/ISessionService/CreateSessionResponse")]
        System.Threading.Tasks.Task<string> CreateSessionAsync(string username, string password, string language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/ISessionService/CreateSessionForCurrentUser", ReplyAction="http://lundalogik.se/Tangelo/ISessionService/CreateSessionForCurrentUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LimeProxy.LimeWs.ServiceException), Action="http://lundalogik.se/Tangelo/ISessionService/CreateSessionForCurrentUserServiceEx" +
            "ceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/Lundalogik.Tangelo.Service")]
        string CreateSessionForCurrentUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/ISessionService/CreateSessionForCurrentUser", ReplyAction="http://lundalogik.se/Tangelo/ISessionService/CreateSessionForCurrentUserResponse")]
        System.Threading.Tasks.Task<string> CreateSessionForCurrentUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/ISessionService/IsValidSession", ReplyAction="http://lundalogik.se/Tangelo/ISessionService/IsValidSessionResponse")]
        bool IsValidSession(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/ISessionService/IsValidSession", ReplyAction="http://lundalogik.se/Tangelo/ISessionService/IsValidSessionResponse")]
        System.Threading.Tasks.Task<bool> IsValidSessionAsync(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/ISessionService/CloseSession", ReplyAction="http://lundalogik.se/Tangelo/ISessionService/CloseSessionResponse")]
        void CloseSession(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://lundalogik.se/Tangelo/ISessionService/CloseSession", ReplyAction="http://lundalogik.se/Tangelo/ISessionService/CloseSessionResponse")]
        System.Threading.Tasks.Task CloseSessionAsync(string sessionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionServiceChannel : LimeProxy.LimeWs.ISessionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SessionServiceClient : System.ServiceModel.ClientBase<LimeProxy.LimeWs.ISessionService>, LimeProxy.LimeWs.ISessionService {
        
        public SessionServiceClient() {
        }
        
        public SessionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SessionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CreateSession(string username, string password, string language) {
            return base.Channel.CreateSession(username, password, language);
        }
        
        public System.Threading.Tasks.Task<string> CreateSessionAsync(string username, string password, string language) {
            return base.Channel.CreateSessionAsync(username, password, language);
        }
        
        public string CreateSessionForCurrentUser() {
            return base.Channel.CreateSessionForCurrentUser();
        }
        
        public System.Threading.Tasks.Task<string> CreateSessionForCurrentUserAsync() {
            return base.Channel.CreateSessionForCurrentUserAsync();
        }
        
        public bool IsValidSession(string sessionId) {
            return base.Channel.IsValidSession(sessionId);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidSessionAsync(string sessionId) {
            return base.Channel.IsValidSessionAsync(sessionId);
        }
        
        public void CloseSession(string sessionId) {
            base.Channel.CloseSession(sessionId);
        }
        
        public System.Threading.Tasks.Task CloseSessionAsync(string sessionId) {
            return base.Channel.CloseSessionAsync(sessionId);
        }
    }
}
